# -*- coding: utf-8 -*-
import io, re, json, datetime, os
from typing import Dict, Any, List, Tuple

PIN_RE = re.compile(r"^\d{4}$")

def is_valid_pin(pin: str) -> bool:
    return bool(PIN_RE.match(str(pin or "").strip()))

def key_from(alias: str, pin: str) -> str:
    alias = (alias or "").strip()
    pin = (pin or "").strip()
    return f"{alias}#{pin}" if alias and pin else ""

def compute_acr(albumin_mg_L: float, urine_cr_mg_dL: float) -> float:
    if albumin_mg_L is None or urine_cr_mg_dL is None or urine_cr_mg_dL == 0:
        return 0.0
    return (albumin_mg_L / urine_cr_mg_dL) * 100.0

def compute_upcr(protein_mg_dL: float, urine_cr_mg_dL: float) -> float:
    if protein_mg_dL is None or urine_cr_mg_dL is None or urine_cr_mg_dL == 0:
        return 0.0
    return (protein_mg_dL / urine_cr_mg_dL) * 1000.0

def interpret_acr(acr: float) -> str:
    if acr <= 0:
        return "ACR: ÏûÖÎ†•Í∞íÏù¥ Î∂ÄÏ°±Ìï©ÎãàÎã§."
    if acr < 30:
        return "ACR < 30 mg/g: Ï†ïÏÉÅ Î≤îÏúÑ"
    if acr <= 300:
        return "ACR 30~300 mg/g: ÎØ∏ÏÑ∏ÏïåÎ∂ÄÎØºÎá®(Ï£ºÏùò)"
    return "ACR > 300 mg/g: ÏïåÎ∂ÄÎØºÎá®(ÏùòÎ£åÏßÑ ÏÉÅÎã¥ Í∂åÏû•)"

def interpret_upcr(upcr: float) -> str:
    if upcr <= 0:
        return "UPCR: ÏûÖÎ†•Í∞íÏù¥ Î∂ÄÏ°±Ìï©ÎãàÎã§."
    if upcr < 150:
        return "UPCR < 150 mg/g: Ï†ïÏÉÅ~Í≤ΩÎØ∏"
    if upcr <= 500:
        return "UPCR 150~500 mg/g: Îã®Î∞±Îá®(Ï£ºÏùò)"
    return "UPCR > 500 mg/g: Í≥†Îã®Î∞±Îá®(ÏùòÎ£åÏßÑ ÏÉÅÎã¥ Í∂åÏû•)"

def anc_banner(anc: float) -> str:
    if anc is None or anc == 0:
        return ""
    if anc < 500:
        return "‚ö†Ô∏è Ìò∏Ï§ëÍµ¨(ANC) 500 ÎØ∏Îßå: Ïô∏Ï∂ú ÏûêÏ†ú¬∑ÏùµÌûå ÏùåÏãù¬∑Î©∏Í∑† ÏãùÌíà Í∂åÏû•. Ï°∞Î¶¨ ÌõÑ 2ÏãúÍ∞Ñ ÏßÄÎÇú ÏùåÏãù ÏÑ≠Ï∑® Í∏àÏßÄ."
    if anc < 1000:
        return "‚ö†Ô∏è Ìò∏Ï§ëÍµ¨(ANC) 500~999: Í∞êÏóº Ï£ºÏùò, Ïã†ÏÑ† Ï±ÑÏÜåÎäî ÏÑ∏Ï≤ô¬∑Í∞ÄÏó¥ ÌõÑ ÏÑ≠Ï∑® Í∂åÏû•."
    return "‚úÖ Ìò∏Ï§ëÍµ¨(ANC) 1000 Ïù¥ÏÉÅ: ÎπÑÍµêÏ†Å ÏïàÏ†ï. ÏúÑÏÉù Í¥ÄÎ¶¨ Ïú†ÏßÄ."

# --- Additional interpreters (simple, general-purpose) ---
def interpret_ferritin(val: float) -> str:
    if not val:
        return ""
    if val < 15:
        return "Ferritin: 15 ng/mL ÎØ∏Îßå ‚Äî Ï≤†Í≤∞Ìïç Í∞ÄÎä•ÏÑ±."
    if val > 500:
        return "Ferritin: 500 ng/mL Ï¥àÍ≥º ‚Äî ÏóºÏ¶ù/Í≥ºÎ∂ÄÌïò Í∞ÄÎä•(Îß•ÎùΩ Í≥†Î†§)."
    return "Ferritin: Ï∞∏Í≥†Î≤îÏúÑ ÎÇ¥(Îß•ÎùΩÌïÑÏöî)."

def interpret_ldh(val: float) -> str:
    if not val:
        return ""
    if val > 480:
        return "LDH ÏÉÅÏäπ ‚Äî Ïö©Ìòà/Ï°∞ÏßÅÏÜêÏÉÅ/Ï¢ÖÏñëÌôúÏÑ± Í∞ÄÎä•ÏÑ±."
    return "LDH: ÎöúÎ†∑Ìïú ÏÉÅÏäπ ÏóÜÏùå."

def interpret_ua(val: float) -> str:
    if not val:
        return ""
    if val > 7.0:
        return "Uric acid ÏÉÅÏäπ ‚Äî Ï¢ÖÏñëÏö©Ìï¥Ï¶ùÌõÑÍµ∞/ÌÜµÌíç ÏúÑÌóò ÌèâÍ∞Ä ÌïÑÏöî."
    return "Uric acid: ÌäπÏù¥ÏÜåÍ≤¨ ÏóÜÏùå."

def interpret_esr(val: float) -> str:
    if not val:
        return ""
    if val > 40:
        return "ESR ÏÉÅÏäπ ‚Äî ÏóºÏ¶ù/Í∞êÏóº/ÏûêÎ©¥Ïó≠ Îì± ÏùòÏã¨."
    return "ESR: Í≤ΩÎØ∏/Ï†ïÏÉÅ."

def interpret_b2m(val: float) -> str:
    if not val:
        return ""
    if val > 3.0:
        return "Œ≤2-microglobulin ÏÉÅÏäπ ‚Äî ÏòàÌõÑ/Ïã†Í∏∞Îä• Î∞òÏòÅ Í∞ÄÎä•."
    return "Œ≤2-microglobulin: Ï∞∏Í≥†Î≤îÏúÑ ÎÇ¥."

# --- LFT / Electrolyte / Coagulation simple interpreters ---
def interpret_ast(val: float) -> str:
    if not val: return ""
    return "AST ÏÉÅÏäπ(Í∞Ñ/Í∑ºÏú° ÏÜêÏÉÅ Í∞ÄÎä•ÏÑ±)" if val > 80 else "AST: ÎöúÎ†∑Ìïú ÏÉÅÏäπ ÏóÜÏùå."

def interpret_alt(val: float) -> str:
    if not val: return ""
    return "ALT ÏÉÅÏäπ(Í∞ÑÏÑ∏Ìè¨ ÏÜêÏÉÅ Í∞ÄÎä•ÏÑ±)" if val > 80 else "ALT: ÎöúÎ†∑Ìïú ÏÉÅÏäπ ÏóÜÏùå."

def interpret_alp(val: float) -> str:
    if not val: return ""
    return "ALP ÏÉÅÏäπ(Îã¥Ï¶ôÏ†ïÏ≤¥/Í≥®ÏÑ±Ïû• Îì±, ÏÜåÏïÑÎäî ÏÉùÎ¶¨Ï†Å ÏÉÅÏäπ Í∞ÄÎä•)" if val > 350 else "ALP: ÌäπÏù¥ÏÜåÍ≤¨ ÏóÜÏùå."

def interpret_ggt(val: float) -> str:
    if not val: return ""
    return "GGT ÏÉÅÏäπ(Îã¥Ï¶ôÏ†ïÏ≤¥/ÏïΩÎ¨º ÏòÅÌñ• Í∞ÄÎä•)" if val > 60 else "GGT: ÌäπÏù¥ÏÜåÍ≤¨ ÏóÜÏùå."

def interpret_tbili(val: float) -> str:
    if not val: return ""
    return "Ï¥ùÎπåÎ¶¨Î£®Îπà ÏÉÅÏäπ(Ìô©Îã¨/Îã¥ÎèÑÌèêÏáÑ/Ïö©Ìòà Îì± ÌèâÍ∞Ä ÌïÑÏöî)" if val > 2.0 else "Ï¥ùÎπåÎ¶¨Î£®Îπà: ÌäπÏù¥ÏÜåÍ≤¨ ÏóÜÏùå."

def interpret_na(val: float) -> str:
    if not val: return ""
    if val < 135: return "Ï†ÄÎÇòÌä∏Î•®ÌòàÏ¶ù(135 ÎØ∏Îßå) ‚Äî ÌÉàÏàò/SIADH Îì± ÌèâÍ∞Ä."
    if val > 145: return "Í≥†ÎÇòÌä∏Î•®ÌòàÏ¶ù(145 Ï¥àÍ≥º) ‚Äî ÏàòÎ∂ÑÍ¥ÄÎ¶¨ ÌïÑÏöî."
    return "Na: 135~145 Î≤îÏúÑ."

def interpret_k(val: float) -> str:
    if not val: return ""
    if val < 3.5: return "Ï†ÄÏπºÎ•®ÌòàÏ¶ù(3.5 ÎØ∏Îßå)"
    if val > 5.5: return "Í≥†ÏπºÎ•®ÌòàÏ¶ù(5.5 Ï¥àÍ≥º) ‚Äî Ïã¨Ï†ÑÎèÑ ÌôïÏù∏ Í≥†Î†§."
    return "K: 3.5~5.5 Î≤îÏúÑ."

def interpret_ca(val: float) -> str:
    if not val: return ""
    if val < 8.5: return "Ï†ÄÏπºÏäòÌòàÏ¶ù(8.5 ÎØ∏Îßå)"
    if val > 10.5: return "Í≥†ÏπºÏäòÌòàÏ¶ù(10.5 Ï¥àÍ≥º)"
    return "Ca: 8.5~10.5 Î≤îÏúÑ."

def interpret_mg(val: float) -> str:
    if not val: return ""
    if val < 1.6: return "Ï†ÄÎßàÍ∑∏ÎÑ§ÏäòÌòàÏ¶ù(1.6 ÎØ∏Îßå)"
    if val > 2.6: return "Í≥†ÎßàÍ∑∏ÎÑ§ÏäòÌòàÏ¶ù(2.6 Ï¥àÍ≥º)"
    return "Mg: 1.6~2.6 Î≤îÏúÑ."

def interpret_phos(val: float) -> str:
    if not val: return ""
    if val < 2.5: return "Ï†ÄÏù∏ÏÇ∞ÌòàÏ¶ù(2.5 ÎØ∏Îßå)"
    if val > 4.5: return "Í≥†Ïù∏ÏÇ∞ÌòàÏ¶ù(4.5 Ï¥àÍ≥º)"
    return "P: 2.5~4.5 Î≤îÏúÑ."

def interpret_inr(val: float) -> str:
    if not val: return ""
    return "INR ÏÉÅÏäπ(>1.3) ‚Äî Ï∂úÌòà ÏúÑÌóò ÌèâÍ∞Ä" if val > 1.3 else "INR: 1.0~1.3 Î≤îÏúÑ."

def interpret_aptt(val: float) -> str:
    if not val: return ""
    return "aPTT Ïó∞Ïû• ‚Äî ÏùëÍ≥†Ïù∏Ïûê/Ìó§ÌååÎ¶∞ ÏòÅÌñ• Í∞ÄÎä•" if val > 40 else "aPTT: ÎåÄÏ≤¥Î°ú Ï†ïÏÉÅ."

def interpret_fibrinogen(val: float) -> str:
    if not val: return ""
    return "ÌîºÎ∏åÎ¶¨ÎÖ∏Í≤ê Ï†ÄÌïò(<150 mg/dL) ‚Äî DIC/HLH ÏùòÏã¨" if val < 150 else "ÌîºÎ∏åÎ¶¨ÎÖ∏Í≤ê: Ïã¨Ìïú Ï†ÄÌïò ÏóÜÏùå."

def interpret_ddimer(val: float) -> str:
    if not val: return ""
    return "D-dimer ÏÉÅÏäπ ‚Äî ÌòàÏ†Ñ/ÏóºÏ¶ù/ÏàòÏà† ÌõÑ Îì± Ïó¨Îü¨ ÏõêÏù∏ Í∞ÄÎä•" if val > 0.5 else "D-dimer: ÎÇÆÏùå."

def interpret_tg(val: float) -> str:
    if not val: return ""
    return "Ï§ëÏÑ±ÏßÄÎ∞© ÏÉÅÏäπ(>265 mg/dL) ‚Äî HLH Í∏∞Ï§Ä Ï§ë ÌïòÎÇò" if val > 265 else "Ï§ëÏÑ±ÏßÄÎ∞©: ÌäπÏù¥ÏÜåÍ≤¨ ÏóÜÏùå."

def interpret_lactate(val: float) -> str:
    if not val: return ""
    return "Ï†ñÏÇ∞ ÏÉÅÏäπ(>2 mmol/L) ‚Äî Ï†ÄÍ¥ÄÎ•ò/Ìå®ÌòàÏ¶ù Îì± ÌèâÍ∞Ä" if val > 2.0 else "Ï†ñÏÇ∞: Ï†ïÏÉÅ Î≤îÏúÑ."

def pediatric_guides(values: Dict[str, Any], group: str, diagnosis: str = "") -> List[str]:
    msgs: List[str] = []
    anc = float(values.get("ANC") or 0)
    if anc:
        msgs.append(anc_banner(anc))
    # Group-level common tips
    if group in ("ÏÜåÏïÑ-ÏùºÏÉÅ", "ÏÜåÏïÑ-Í∞êÏóº", "ÏÜåÏïÑ-ÌòàÏï°Ïïî", "ÏÜåÏïÑ-Í≥†ÌòïÏïî", "ÏÜåÏïÑ-Ïú°Ï¢Ö", "ÏÜåÏïÑ-Ìù¨Í∑ÄÏïî"):
        msgs += [
            "üçº ÏÜåÏïÑ Í≥µÌÜµ: Ìï¥Ïó¥Ï†úÎäî Ï†ïÌï¥ÏßÑ Ïö©Îüâ/Í∞ÑÍ≤© Ï§ÄÏàò. Ï¶ùÏÉÅ ÏßÄÏÜç/ÏïÖÌôî Ïãú ÏùòÎ£åÏßÑÍ≥º ÏÉÅÏùò.",
            "üçΩÔ∏è ÏùåÏãù: ÏÉùÏ±ÑÏÜå Í∏àÏßÄ, Î™®Îì† ÏùåÏãùÏùÄ Ï∂©Î∂ÑÌûà Í∞ÄÏó¥(Ï†ÑÏûêÎ†àÏù∏ÏßÄ 30Ï¥à Ïù¥ÏÉÅ). ÍªçÏßà Í≥ºÏùºÏùÄ Îã¥ÎãπÏùòÏôÄ ÏÉÅÎã¥.",
            "ü•° Î≥¥Í¥Ä: Ï°∞Î¶¨ ÌõÑ 2ÏãúÍ∞Ñ Í≤ΩÍ≥º ÏùåÏãù Ïû¨ÏÑ≠Ï∑® Í∏àÏßÄ.",
        ]
    # Diagnosis-specific enrichments (examples)
    d = (diagnosis or "").lower()
    if "all" in d:
        msgs += ["ALL: Ïú†ÏßÄÏöîÎ≤ï(6-MP/MTX Îì±) Î≥µÏö© ÎàÑÎùΩ Ï£ºÏùò, Î∞úÏó¥ Ïãú Ï¶âÏãú Î≥¥Í≥†."]
    if "aml" in d or "apl" in d:
        msgs += ["AML/APL: Ï†êÎßâÏ∂úÌòà¬∑Î©ç Ï¶ùÍ∞Ä Ïãú Ìï≠ÏùëÍ≥†Ï†ú/Ìï≠ÌòàÏÜåÌåêÏ†ú ÏûÑÏùò Ï§ëÎã® Í∏àÏßÄ, ÏùòÎ£åÏßÑÍ≥º ÏÉÅÏùò."]
    if "Ïú†Ïûâ" in d or "ewing" in d:
        msgs += ["Ïú†ÏûâÏú°Ï¢Ö: VAC/IE Ï£ºÍ∏∞ Ï§ë Î∞úÏó¥Ï§ëÏÑ±Íµ¨Í∞êÏóº(FN) ÍµêÏú° Í∞ïÌôî ÌïÑÏöî.", "IE Ï£ºÍ∏∞ Ï†ÑÌõÑ ÏàòÎ∂ÑÏÑ≠Ï∑®¬∑Ïã†Ïû•Í∏∞Îä• Î™®ÎãàÌÑ∞."]
    if "Í≥®Ïú°Ï¢Ö" in d or "osteosarcoma" in d:
        msgs += ["Í≥®Ïú°Ï¢Ö: Í≥†Ïö©Îüâ MTX Ïãú ÏàòÎ∂Ñ¬∑ÏïåÏπºÎ¶¨Îá®, Î•òÏΩîÎ≥¥Î¶∞ Íµ¨Ï°∞ÏöîÎ≤ï Ïä§ÏºÄÏ§Ñ Ï§ÄÏàò.", "ÏãúÏä§ÌîåÎùºÌã¥ Î≥ëÏö© Ïãú Ïù¥ÎèÖÏÑ± Í¥ÄÏ∞∞(Ï≤≠Î†• Î≥ÄÌôî Ïãú Î≥¥Í≥†)."]
    if "rhabdomyo" in d or "Ìö°Î¨∏Í∑ºÏú°Ï¢Ö" in d:
        msgs += ["Ìö°Î¨∏Í∑ºÏú°Ï¢Ö: ÎπàÌÅ¨Î¶¨Ïä§Ìã¥ ÎßêÏ¥àÏã†Í≤Ω Ï¶ùÏÉÅ(Î≥¥Ìñâ/Í∞êÍ∞Å) Ï≤¥ÌÅ¨, Î≥ÄÎπÑ ÏòàÎ∞© ÍµêÏú°."]
    if "hlh" in d:
        msgs += ["HLH: Î∞úÏó¥ ÏßÄÏÜç/ÏùòÏãùÏ†ÄÌïò Ïãú Ï¶âÏãú ÎÇ¥Ïõê, ferritin/TG/ÌîºÎ∏åÎ¶¨ÎÖ∏Í≤ê Ï∂îÏ†Å."]
    return msgs

def build_report_md(meta: Dict[str, Any], values: Dict[str, Any], derived: Dict[str, Any], guides: List[str]) -> str:
    now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M")
    lines = []
    lines.append(f"# ÌîºÏàòÏπò Í∞ÄÏù¥Îìú Í≤∞Í≥º ({now})")
    lines.append("")
    lines.append(f"- ÏÇ¨Ïö©Ïûê: **{meta.get('user_key','-')}**")
    lines.append(f"- ÏßÑÎã®: {meta.get('diagnosis','-')}")
    lines.append(f"- Ïπ¥ÌÖåÍ≥†Î¶¨: {meta.get('category','-')}")
    lines.append("")
    lines.append("## ÏûÖÎ†• ÏàòÏπò")
    for k, v in values.items():
        if v is None or v == "":
            continue
        lines.append(f"- {k}: {v}")
    lines.append("")
    lines.append("## ÏûêÎèô Í≥ÑÏÇ∞")
    for k, v in derived.items():
        lines.append(f"- {k}: {v}")
    if guides:
        lines.append("")
        lines.append("## ÏÜåÏïÑ/ÏºÄÏñ¥ Í∞ÄÏù¥Îìú")
        for g in guides:
            lines.append(f"- {g}")
    lines.append("")
    lines.append(f"---\nÏ†úÏûë: Hoya/GPT ¬∑ ÏûêÎ¨∏: Hoya/GPT ¬∑ ÌïúÍµ≠ÏãúÍ∞Ñ Í∏∞Ï§Ä")
    return "\n".join(lines)

def build_report_txt(md: str) -> str:
    text = md.replace("#", "").replace("**", "")
    return text

def _register_kr_font(c):
    try:
        from reportlab.pdfbase import pdfmetrics
        from reportlab.pdfbase.ttfonts import TTFont
        base_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "fonts"))
        candidates = ["NotoSansKR-Regular.ttf", "NanumGothic.ttf", "AppleSDGothicNeo.ttf"]
        for name in candidates:
            path = os.path.join(base_dir, name)
            if os.path.exists(path):
                pdfmetrics.registerFont(TTFont("KR", path))
                c.setFont("KR", 10)
                return True
    except Exception:
        pass
    return False

def build_report_pdf_bytes(md: str) -> bytes:
    try:
        from reportlab.lib.pagesizes import A4
        from reportlab.pdfgen import canvas
        from reportlab.lib.units import mm
        buffer = io.BytesIO()
        c = canvas.Canvas(buffer, pagesize=A4)
        has_kr = _register_kr_font(c)
        if not has_kr:
            c.setFont("Helvetica", 10)
        width, height = A4
        y = height - 15*mm
        for raw in md.splitlines():
            if y < 20*mm:
                c.showPage()
                c.setFont("KR" if has_kr else "Helvetica", 10)
                y = height - 15*mm
            c.drawString(15*mm, y, raw)
            y -= 6*mm
        c.showPage()
        c.save()
        pdf = buffer.getvalue()
        buffer.close()
        return pdf
    except Exception as e:
        return f"PDF ÏÉùÏÑ± Ïã§Ìå®: {e}".encode("utf-8")


# --- Pediatric infection quick interpreter ---
def interpret_ped_infection(paths, temp_c: float, fever_days: float, dehydration: str, resp_severity: str,
                            risk_neutro: bool=False, age_months: int=0) -> list:
    """
    paths: list of selected pathogens, e.g., ["Adenovirus","RSV"]
    dehydration: "-", "ÏóÜÏùå","Í≤ΩÎØ∏","Ï§ëÎì±ÎèÑ","Ï§ëÏ¶ù"
    resp_severity: "-", "Í≤ΩÏ¶ù","Ï§ëÎì±ÎèÑ","Ï§ëÏ¶ù"
    """
    msgs = []
    P = set([p.lower() for p in paths])

    if risk_neutro:
        msgs.append("‚ö†Ô∏è Ìï≠ÏïîÏπòÎ£å/Ìò∏Ï§ëÍµ¨Í∞êÏÜåÏ¶ù ÏùòÏã¨: 38.0‚ÑÉ Ïù¥ÏÉÅ Î∞úÏó¥ Ïãú Ï¶âÏãú ÎÇ¥Ïõê(FN Í∑úÏïΩ).")

    if age_months and age_months < 3*12 and temp_c >= 38.0:
        msgs.append("‚ö†Ô∏è ÏòÅÏïÑ(36Í∞úÏõî ÎØ∏Îßå) Î∞úÏó¥: Ï†ÄÏó∞Î†π Í≥†ÏúÑÌóòÍµ∞ ‚Äî ÏùòÎ£åÍ∏∞Í¥Ä ÌèâÍ∞Ä Í∂åÍ≥†.")

    # Generic by pathogen
    if "adenovirus" in P or "ÏïÑÎç∞ÎÖ∏" in P:
        msgs += ["ÏïÑÎç∞ÎÖ∏Î∞îÏù¥Îü¨Ïä§: Í≥†Ïó¥¬∑Ïù∏ÎëêÏóº/Í≤∞ÎßâÏóº Í∞ÄÎä•. Ìï¥Ïó¥¬∑ÏàòÎ∂Ñ, ÏÑ∏Í∑† 2Ï∞®Í∞êÏóº ÏùòÏã¨ Ïãú ÏßÑÎ£å."]
    if "rsv" in P:
        msgs += ["RSV: ÏÑ∏Í∏∞Í¥ÄÏßÄÏóº ‚Äî ÏàòÎ∂Ñ, ÎπÑÍ∞ïÌù°Ïù∏, ÏÇ∞ÏÜåÌè¨ÌôîÎèÑ Í¥ÄÏ∞∞. Ìò∏Ìù°Í≥§ÎûÄ/ÏñºÍµ¥Ï∞ΩÎ∞±/Î¨¥Ìò∏Ìù° Ïãú Ï¶âÏãú ÎÇ¥Ïõê."]
    if "influenza" in P or "Ïù∏ÌîåÎ£®ÏóîÏûê" in P or "flu" in P:
        msgs += ["Ïù∏ÌîåÎ£®ÏóîÏûê: Ï¶ùÏÉÅ 48ÏãúÍ∞Ñ Ïù¥ÎÇ¥ÎùºÎ©¥ Ìï≠Î∞îÏù¥Îü¨Ïä§Ï†ú Í≥†Î†§(Í≥†ÏúÑÌóòÍµ∞ Ïö∞ÏÑ†). Ìï¥Ïó¥¬∑ÏàòÎ∂Ñ, Ìï©Î≥ëÏ¶ù Ï£ºÏùò."]
    if "parainfluenza" in P or "ÌååÎùºÏù∏ÌîåÎ£®ÏóîÏûê" in P or "ÌÅ¨Î£π" in P:
        msgs += ["ÌååÎùºÏù∏ÌîåÎ£®ÏóîÏûê/ÌÅ¨Î£π: ÏªπÏªπÍ∏∞Ïπ®¬∑Ìù°Í∏∞ÏÑ± Ï≤úÎ™Ö Ïãú ÏùëÍ∏âÏã§ÏóêÏÑú Ïä§ÌÖåÎ°úÏù¥Îìú/ÎÑ§Î∂àÎùºÏù¥Ï†Ä Í≥†Î†§."]
    if "rhinovirus" in P or "ÎùºÏù¥ÎÖ∏" in P:
        msgs += ["ÎùºÏù¥ÎÖ∏Î∞îÏù¥Îü¨Ïä§: ÏÉÅÍ∏∞ÎèÑÍ∞êÏóº ‚Äî ÎåÄÏ¶ùÏπòÎ£å, ÏàòÎ∂Ñ¬∑ÎπÑÍ∞ïÏÑ∏Ï≤ô."]
    if "metapneumovirus" in P or "Î©îÌÉÄÎâ¥Î™®" in P:
        msgs += ["hMPV: RSV Ïú†ÏÇ¨ ‚Äî Ï†ÄÏó∞Î†π/Í∏∞Ï†ÄÏßàÌôò Ïãú Ìò∏Ìù°Î∂ÄÏ†Ñ Í¥ÄÏ∞∞."]
    if "norovirus" in P or "Î°úÌÉÄ" in P or "rotavirus" in P:
        msgs += ["Ïû•Í¥ÄÎ∞îÏù¥Îü¨Ïä§: Íµ¨ÌÜ†¬∑ÏÑ§ÏÇ¨ ‚Äî ÏÜåÎüâ¬∑ÏûêÏ£º ORS, ÌÉàÏàò ÏßïÌõÑ Ïãú ÏàòÏï°ÏπòÎ£å."]
    if "covid" in P or "sars-cov-2" in P or "ÏΩîÎ°úÎÇò" in P:
        msgs += ["COVID-19: Í≥†Ïó¥¬∑Í∏∞Ïπ®¬∑Ïù∏ÌõÑÌÜµ. Í≤©Î¶¨/Îì±Íµê Í∏∞Ï§ÄÏùÄ ÏßÄÏó≠ ÏßÄÏπ® Îî∞Î•¥Î©∞, Í≥†ÏúÑÌóòÍµ∞ Ìï≠Î∞îÏù¥Îü¨Ïä§ Í≥†Î†§."]

    # Fever duration
    if fever_days and fever_days >= 5:
        msgs.append("Î∞úÏó¥ 5Ïùº Ïù¥ÏÉÅ ÏßÄÏÜç: Í∞ÄÏôÄÏÇ¨ÌÇ§/Îã§Î•∏ ÏõêÏù∏ Í∞êÎ≥Ñ ÏúÑÌï¥ ÏßÑÎ£å Í∂åÍ≥†.")

    # Dehydration
    d = (dehydration or "").strip()
    if d in ("Ï§ëÎì±ÎèÑ","Ï§ëÏ¶ù"):
        msgs.append("ÌÉàÏàò Ï§ëÎì±ÎèÑ Ïù¥ÏÉÅ: ORS Ïã§Ìå® Ïãú Î≥ëÏõê ÏàòÏï°ÏπòÎ£å Í≥†Î†§.")
    elif d == "Í≤ΩÎØ∏":
        msgs.append("ÌÉàÏàò Í≤ΩÎØ∏: ÏÜåÎüâ¬∑ÏûêÏ£º ÏàòÎ∂ÑÍ≥µÍ∏â, Ï†ÑÌï¥Ïßà Î≥¥Ï∂©.")

    # Respiratory severity
    r = (resp_severity or "").strip()
    if r == "Ï§ëÏ¶ù":
        msgs.append("Ìò∏Ìù°Í≥§ÎûÄ(Ï§ëÏ¶ù): Ï≤≠ÏÉâÏ¶ù¬∑Ìï®Î™∞Ìò∏Ìù°¬∑Î¨¥Ìò∏Ìù° ‚Äî ÏùëÍ∏âÏã§ Í∂åÍ≥†.")
    elif r == "Ï§ëÎì±ÎèÑ":
        msgs.append("Ìò∏Ìù°Í≥§ÎûÄ(Ï§ëÎì±ÎèÑ): Ìò∏Ìù°Ïàò Ï¶ùÍ∞Ä/Ìï®Î™∞ ‚Äî ÏùòÎ£åÍ∏∞Í¥Ä ÌèâÍ∞Ä Í∂åÍ≥†.")

    # High temp
    if temp_c and temp_c >= 39.0:
        msgs.append("Í≥†Ïó¥(‚â•39‚ÑÉ): Ìï¥Ïó¥Ï†ú(ÏïÑÏÑ∏Ìä∏ÏïÑÎØ∏ÎÖ∏Ìéú/Ïù¥Î∂ÄÌîÑÎ°úÌéú) ÍµêÎåÄ Î≥µÏö© Í∞ÄÎä• ‚Äî Í∞Ñ¬∑Ïã†Ïû• Î≥ëÎ†• ÌôïÏù∏.")

    if not msgs:
        msgs.append("ÏûÖÎ†•Í∞íÏù¥ Î∂ÄÏ°±Ìï©ÎãàÎã§. Ï¶ùÏÉÅ¬∑Ï≤¥Ïò®¬∑Î≥ëÏõêÏ≤¥Î•º ÏÑ†ÌÉùÌïòÎ©¥ ÎßûÏ∂§ ÏïàÎÇ¥Í∞Ä ÎÇòÏòµÎãàÎã§.")
    return msgs


def interpret_bnp(val: float) -> str:
    if not val:
        return ""
    # Í∞ÑÎã® Í∏∞Ï§Ä(ÏÑ±Ïù∏ ÏùºÎ∞ò): >100 pg/mL ÏÉÅÏäπ. ÏÜåÏïÑ/Ïó∞Î†πÎ≥Ñ ÏÉÅÏù¥Ìï† Ïàò ÏûàÏùå.
    if val > 100:
        return "BNP ÏÉÅÏäπ ‚Äî Ïã¨Î∂ÄÏ†Ñ/Ïã¨Ïû• Î∂ÄÎã¥ Í∞ÄÎä•ÏÑ±(Ïó∞Î†π¬∑Ïã†Ïû•/ÏàòÎ∂ÑÏÉÅÌÉú Í≥†Î†§)."
    return "BNP: ÎöúÎ†∑Ìïú ÏÉÅÏäπ ÏóÜÏùå."
